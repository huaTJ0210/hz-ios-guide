{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import ReactDOM from'react-dom';import'./index.css';import App from'./App.jsx';/**\n  *  将与原生交互的bridge对象挂载到React下，并绑定全局函数\n  *  调用原生方法示例\n  * \n     var self = this;\n      React.$bqJSBridgeService('firstPageClick', { name: 'li' }, function(data) {\n        self.setState({\n          text: data.name\n        });\n      });\n\n  * */var u=navigator.userAgent;var isiOS=!!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);if(isiOS){// iOS 初始化\nReact.$bridge=window.WebViewJavascriptBridge;}else{// android初始化（安卓初始化对象较晚）\ndocument.addEventListener('WebViewJavascriptBridgeReady',function(){React.$bridge=window.WebViewJavascriptBridge;});}React.$bqJSBridgeService=function(funcName,funcParams,callbackFuc){var lastParams={'FUNC_NAME':funcName,'FUNC_PARAMS':funcParams};if(typeof React.$bridge=='undefined'){document.addEventListener('WebViewJavascriptBridgeReady',function(){React.$bridge=window.WebViewJavascriptBridge;React.$bridge.callHandler('BQJSBridgeService',lastParams,function(response){if(typeof response=='string'){response=JSON.parse(response);callbackFuc(response);}else{callbackFuc(response);}});});}else{React.$bridge.callHandler('BQJSBridgeService',lastParams,function(response){if(typeof response=='string'){response=JSON.parse(response);callbackFuc(response);}else{callbackFuc(response);}});}};// 注意bridge的绑定一定在ReactDOM渲染前，不然业务组件的componentDidMount方法中获取React.$bridge会为空对象\nReactDOM.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}),document.getElementById('root'));","map":{"version":3,"sources":["/Users/huatianjie/Desktop/demo/react-bridge/my-app/src/index.js"],"names":["React","ReactDOM","App","u","navigator","userAgent","isiOS","match","$bridge","window","WebViewJavascriptBridge","document","addEventListener","$bqJSBridgeService","funcName","funcParams","callbackFuc","lastParams","callHandler","response","JSON","parse","render","getElementById"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,WAAhB,CAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MACC,GAAIC,CAAAA,CAAC,CAAGC,SAAS,CAACC,SAAlB,CACA,GAAIC,CAAAA,KAAK,CAAG,CAAC,CAACH,CAAC,CAACI,KAAF,CAAQ,+BAAR,CAAd,CACA,GAAGD,KAAH,CAAS,CACJ;AACDN,KAAK,CAACQ,OAAN,CAAiBC,MAAM,CAACC,uBAAxB,CACH,CAHD,IAGK,CACD;AACAC,QAAQ,CAACC,gBAAT,CACA,8BADA,CAC+B,UAAU,CACxCZ,KAAK,CAACQ,OAAN,CAAgBC,MAAM,CAACC,uBAAvB,CACA,CAHD,EAIH,CAEFV,KAAK,CAACa,kBAAN,CAA2B,SAAUC,QAAV,CAAoBC,UAApB,CAAgCC,WAAhC,CAA6C,CACtE,GAAIC,CAAAA,UAAU,CAAG,CAAE,YAAaH,QAAf,CAAyB,cAAeC,UAAxC,CAAjB,CACA,GAAI,MAAQf,CAAAA,KAAK,CAACQ,OAAd,EAA0B,WAA9B,CAA2C,CACzCG,QAAQ,CAACC,gBAAT,CACE,8BADF,CACkC,UAAY,CAC1CZ,KAAK,CAACQ,OAAN,CAAgBC,MAAM,CAACC,uBAAvB,CACAV,KAAK,CAACQ,OAAN,CAAcU,WAAd,CAA0B,mBAA1B,CAA+CD,UAA/C,CAA2D,SAAUE,QAAV,CAAoB,CAC7E,GAAI,MAAOA,CAAAA,QAAP,EAAmB,QAAvB,CAAiC,CAC/BA,QAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAX,CACAH,WAAW,CAACG,QAAD,CAAX,CACD,CAHD,IAGO,CACLH,WAAW,CAACG,QAAD,CAAX,CACD,CACF,CAPD,EAQD,CAXH,EAYD,CAbD,IAaO,CACLnB,KAAK,CAACQ,OAAN,CAAcU,WAAd,CAA0B,mBAA1B,CAA+CD,UAA/C,CAA2D,SAAUE,QAAV,CAAoB,CAC7E,GAAI,MAAOA,CAAAA,QAAP,EAAmB,QAAvB,CAAiC,CAC/BA,QAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAX,CACAH,WAAW,CAACG,QAAD,CAAX,CACD,CAHD,IAGO,CACLH,WAAW,CAACG,QAAD,CAAX,CACD,CACF,CAPD,EAQD,CACF,CAzBD,CA4BA;AACClB,QAAQ,CAACqB,MAAT,cACC,KAAC,KAAD,CAAO,UAAP,wBACE,KAAC,GAAD,IADF,EADD,CAICX,QAAQ,CAACY,cAAT,CAAwB,MAAxB,CAJD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\n /**\n  *  将与原生交互的bridge对象挂载到React下，并绑定全局函数\n  *  调用原生方法示例\n  * \n     var self = this;\n      React.$bqJSBridgeService('firstPageClick', { name: 'li' }, function(data) {\n        self.setState({\n          text: data.name\n        });\n      });\n\n  * */ \n var u = navigator.userAgent;\n var isiOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\n if(isiOS){\n      // iOS 初始化\n     React.$bridge =  window.WebViewJavascriptBridge;\n }else{\n     // android初始化（安卓初始化对象较晚）\n     document.addEventListener(\n     'WebViewJavascriptBridgeReady',function(){\n      React.$bridge = window.WebViewJavascriptBridge;\n     });\n }\n\nReact.$bqJSBridgeService = function (funcName, funcParams, callbackFuc) {\n  var lastParams = { 'FUNC_NAME': funcName, 'FUNC_PARAMS': funcParams };\n  if (typeof (React.$bridge) == 'undefined') {\n    document.addEventListener(\n      'WebViewJavascriptBridgeReady', function () {\n        React.$bridge = window.WebViewJavascriptBridge;\n        React.$bridge.callHandler('BQJSBridgeService', lastParams, function (response) {\n          if (typeof response == 'string') {\n            response = JSON.parse(response)\n            callbackFuc(response);\n          } else {\n            callbackFuc(response);\n          }\n        })\n      });\n  } else {\n    React.$bridge.callHandler('BQJSBridgeService', lastParams, function (response) {\n      if (typeof response == 'string') {\n        response = JSON.parse(response)\n        callbackFuc(response);\n      } else {\n        callbackFuc(response);\n      }\n    });\n  }\n};\n\n\n// 注意bridge的绑定一定在ReactDOM渲染前，不然业务组件的componentDidMount方法中获取React.$bridge会为空对象\n ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"]},"metadata":{},"sourceType":"module"}