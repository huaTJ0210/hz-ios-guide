{"version":3,"sources":["App.jsx","index.js"],"names":["App","props","state","text","text1","handleClick","bind","self","this","React","$bridge","registerHandler","data","responseCallback","console","log","setState","name","$bqJSBridgeService","onClick","Component","navigator","userAgent","match","window","WebViewJavascriptBridge","document","addEventListener","funcName","funcParams","callbackFuc","lastParams","callHandler","response","JSON","parse","ReactDOM","render","StrictMode","getElementById"],"mappings":"yNAEqBA,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,KAAM,2BAAOC,MAAM,gBACjC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,gEAQjB,IAAIC,EAAOC,KACXC,IAAMC,QAAQC,gBAAgB,aAAa,SAAUC,EAAMC,GACzDC,QAAQC,IAAI,uBAAwBH,GACpCL,EAAKS,SAAS,CACZZ,MAAOQ,EAAKK,OAEdJ,EAAiB,CAAEI,KAAM,+B,oCAY3B,IAAIV,EAAOC,KACXC,IAAMS,mBAAmB,iBAAkB,CAAED,KAAM,OAAQ,SAASL,GAClEL,EAAKS,SAAS,CACZb,KAAMS,EAAKK,Y,+BAMf,OACE,gCACE,wBAAQE,QAASX,KAAKH,YAAtB,kDACA,4BAAIG,KAAKN,MAAMC,OACf,4BAAIK,KAAKN,MAAME,e,GAzCUgB,eCexBC,UAAUC,UACFC,MAAM,iCAGlBd,IAAMC,QAAWc,OAAOC,wBAGxBC,SAASC,iBACT,gCAA+B,WAC9BlB,IAAMC,QAAUc,OAAOC,2BAI7BhB,IAAMS,mBAAqB,SAAUU,EAAUC,EAAYC,GACzD,IAAIC,EAAa,CAAE,UAAaH,EAAU,YAAeC,GAC3B,oBAAlBpB,IAAMC,QAChBgB,SAASC,iBACP,gCAAgC,WAC9BlB,IAAMC,QAAUc,OAAOC,wBACvBhB,IAAMC,QAAQsB,YAAY,oBAAqBD,GAAY,SAAUE,GAC5C,iBAAZA,GACTA,EAAWC,KAAKC,MAAMF,GACtBH,EAAYG,IAEZH,EAAYG,SAKpBxB,IAAMC,QAAQsB,YAAY,oBAAqBD,GAAY,SAAUE,GAC5C,iBAAZA,GACTA,EAAWC,KAAKC,MAAMF,GACtBH,EAAYG,IAEZH,EAAYG,OAQnBG,IAASC,OACR,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,W","file":"static/js/main.c8abfaf0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {text: \"显示数据\",text1:'数据'};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() { \n    // 注册需要app端调用的业务方法，具体执行在回调函数中执行具体业务【比如ajax请求】\n    var self = this; \n    React.$bridge.registerHandler('appCallJS', function (data, responseCallback) {\n      console.log(\"JS Echo called with:\", data)\n      self.setState({\n        text1: data.name\n      });\n      responseCallback({ name: 'from js callBack data' });\n    });\n  }\n\n  handleClick() {\n    /*\n       web调用原生方法\n       bqJSBridgeService接收三个参数：\n       funcName: 原生方法名，\n       funcParmas: 原生方法参数，\n       callbackFunc:原生调用js的回调函数\n    */ \n    var self = this; //注意回调中若要使用this，需要提前绑定给临时变量，不然this获取不到\n    React.$bqJSBridgeService('firstPageClick', { name: 'li' }, function(data) {\n      self.setState({\n        text: data.name\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>获取原生数据</button>\n        <p>{this.state.text}</p>\n        <p>{this.state.text1}</p>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\n /**\n  *  将与原生交互的bridge对象挂载到React下，并绑定全局函数\n  *  调用原生方法示例\n  * \n     var self = this;\n      React.$bqJSBridgeService('firstPageClick', { name: 'li' }, function(data) {\n        self.setState({\n          text: data.name\n        });\n      });\n\n  * */ \n var u = navigator.userAgent;\n var isiOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\n if(isiOS){\n      // iOS 初始化\n     React.$bridge =  window.WebViewJavascriptBridge;\n }else{\n     // android初始化（安卓初始化对象较晚）\n     document.addEventListener(\n     'WebViewJavascriptBridgeReady',function(){\n      React.$bridge = window.WebViewJavascriptBridge;\n     });\n }\n\nReact.$bqJSBridgeService = function (funcName, funcParams, callbackFuc) {\n  var lastParams = { 'FUNC_NAME': funcName, 'FUNC_PARAMS': funcParams };\n  if (typeof (React.$bridge) == 'undefined') {\n    document.addEventListener(\n      'WebViewJavascriptBridgeReady', function () {\n        React.$bridge = window.WebViewJavascriptBridge;\n        React.$bridge.callHandler('BQJSBridgeService', lastParams, function (response) {\n          if (typeof response == 'string') {\n            response = JSON.parse(response)\n            callbackFuc(response);\n          } else {\n            callbackFuc(response);\n          }\n        })\n      });\n  } else {\n    React.$bridge.callHandler('BQJSBridgeService', lastParams, function (response) {\n      if (typeof response == 'string') {\n        response = JSON.parse(response)\n        callbackFuc(response);\n      } else {\n        callbackFuc(response);\n      }\n    });\n  }\n};\n\n\n// 注意bridge的绑定一定在ReactDOM渲染前，不然业务组件的componentDidMount方法中获取React.$bridge会为空对象\n ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}